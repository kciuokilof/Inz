#include        <sys/types.h>   /* basic system data types */
#include        <sys/socket.h>  /* basic socket definitions */
#if TIME_WITH_SYS_TIME
#include        <sys/time.h>    /* timeval{} for select() */
#include        <time.h>                /* timespec{} for pselect() */
#else
#if HAVE_SYS_TIME_H
#include        <sys/time.h>    /* includes <time.h> unsafely */
#else
#include        <time.h>                /* old system? */
#endif
#endif
#include        <netinet/in.h>  /* sockaddr_in{} and other Internet defns */
#include        <arpa/inet.h>   /* inet(3) functions */
#include        <errno.h>
#include        <fcntl.h>               /* for nonblocking */
#include        <netdb.h>
#include        <signal.h>
#include        <stdio.h>
#include        <stdlib.h>
#include        <string.h>
#include        <sys/wait.h>

#define MAXLINE 1024

#define SA struct sockaddr

#define LISTENQ 2


void
sig_chld(int signo)
{
	pid_t	pid;
	int		stat;

	while ( (pid = waitpid(-1, &stat, WNOHANG)) > 0)
		printf("child %d terminated\n", pid);
	return;
}

ssize_t						/* Write "n" bytes to a descriptor. */
writen(int fd, const void *vptr, size_t n)
{
	size_t		nleft;
	ssize_t		nwritten;
	const char	*ptr;

	ptr = vptr;
	nleft = n;
	while (nleft > 0) {
		if ( (nwritten = write(fd, ptr, nleft)) <= 0) {
			if (nwritten < 0 && errno == EINTR)
				nwritten = 0;		/* and call write() again */
			else
				return(-1);			/* error */
		}

		nleft -= nwritten;
		ptr   += nwritten;
	}
	return(n);
}
/* end writen */

void
Writen(int fd, void *ptr, size_t nbytes)
{
	if (writen(fd, ptr, nbytes) != nbytes)
		perror("writen error");
}

void
str_echo(int sockfd)
{
	ssize_t		n;
	char		buf[MAXLINE];
	time_t				ticks;
	int sek[4];
	int k;
	for (k=0;k<4;k++){
		sek[k]=rand();
		printf("%i\n",sek[k]);
}

again:

        ticks = time(NULL);
        //snprintf(buf, sizeof(buf),sek);
		Writen(sockfd, sek, sizeof(sek));
	

	if (n < 0 && errno == EINTR)
		goto again;
	else if (n < 0)
		perror("str_echo: read error");
}
			

int
main(int argc, char **argv)
{
	int					listenfd, connfd;
	pid_t				childpid;
	socklen_t			clilen;
	struct sockaddr_in6	cliaddr, servaddr;
	void				sig_chld(int);
	

#ifdef SIGCHLD
    struct sigaction new_action, old_action;

  /* Set up the structure to specify the new action. */
    new_action.sa_handler = sig_chld;
  //  new_action.sa_handler = SIG_IGN;
    sigemptyset (&new_action.sa_mask);
    new_action.sa_flags = 0;

    if( sigaction (SIGCHLD, &new_action, &old_action) < 0 ){
          fprintf(stderr,"sigaction error : %s\n", strerror(errno));
          return 1;
    }
 
#endif 
//	signal(SIGCHLD, sig_chld);
//	signal(SIGCHLD, SIG_IGN);
	
   if ( (listenfd = socket(AF_INET6, SOCK_STREAM, 0)) < 0){
          fprintf(stderr,"socket error : %s\n", strerror(errno));
          return 1;
   }
   int optval = 1;               
   if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval)) < 0){
                fprintf(stderr,"SO_REUSEADDR setsockopt error : %s\n", strerror(errno));
   }

	bzero(&servaddr, sizeof(servaddr));
	servaddr.sin6_family = AF_INET6;
	servaddr.sin6_addr   = in6addr_any;
	servaddr.sin6_port   = htons(13);	/* daytime server */

   if ( bind( listenfd, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0){
           fprintf(stderr,"bind error : %s\n", strerror(errno));
           return 1;
   }

   if ( listen(listenfd, LISTENQ) < 0){
           fprintf(stderr,"listen error : %s\n", strerror(errno));
           return 1;
   }
   



	for ( ; ; ) {
		clilen = sizeof(cliaddr);
		if ( (connfd = accept(listenfd, (SA *) &cliaddr, &clilen)) < 0) {
			if (errno == EINTR)
				continue;		/* back to for() */
			else
				perror("accept error");
				exit(1);
		}

		if ( (childpid = fork()) == 0) {	/* child process */
			close(listenfd);	/* close listening socket */
			str_echo(connfd);	/* process the request */
			exit(0);
		}
		close(connfd);			/* parent closes connected socket */
	}
}


#include        <sys/types.h>   /* basic system data types */
#include        <sys/socket.h>  /* basic socket definitions */
#if TIME_WITH_SYS_TIME
#include        <sys/time.h>    /* timeval{} for select() */
#include        <time.h>                /* timespec{} for pselect() */
#else
#if HAVE_SYS_TIME_H
#include        <sys/time.h>    /* includes <time.h> unsafely */
#else
#include        <time.h>                /* old system? */
#endif
#endif
#include        <netinet/in.h>  /* sockaddr_in{} and other Internet defns */
#include        <arpa/inet.h>   /* inet(3) functions */
#include        <errno.h>
#include        <fcntl.h>               /* for nonblocking */
#include        <netdb.h>
#include        <signal.h>
#include        <stdio.h>
#include        <stdlib.h>
#include        <string.h>
#include	<netinet/tcp.h>		/* for TCP_MAXSEG */

#define SA      struct sockaddr
#define MAXLINE 2048

int
main(int argc, char **argv)
{
	int					sockfd, rcvbuf, mss,recvint[4];
	socklen_t			len;
	struct sockaddr_in6	servaddr;
	char				recvline[MAXLINE + 1];
	int err,n;
	struct timeval start, stop;

	if (argc != 2){
		fprintf(stderr, "ERROR: usage: %s <IPv6 address>\n", argv[0]);
		return 1;
	}

	if ( (sockfd = socket(AF_INET6, SOCK_STREAM, 0)) < 0){
                fprintf(stderr,"socket error : %s\n", strerror(errno));
                return 1;
    }

	len = sizeof(rcvbuf);
	if( getsockopt(sockfd, SOL_SOCKET, SO_RCVBUF, &rcvbuf, &len) == -1 )
	{	
		fprintf(stderr,"getsockopt error : %s\n", strerror(errno));
		return 2;
	}
	len = sizeof(mss);
	if( getsockopt(sockfd, IPPROTO_TCP, TCP_MAXSEG, &mss, &len) == -1 ){
		fprintf(stderr,"getsockopt error : %s\n", strerror(errno));
		return 3;
	}
	printf("defaults: SO_RCVBUF = %d, MSS = %d\n", rcvbuf, mss);

#ifdef OPTION_SET
#define RCVBUF 9973   /* a prime number */
	rcvbuf = RCVBUF;		
	if( setsockopt(sockfd, SOL_SOCKET, SO_RCVBUF, &rcvbuf, sizeof(rcvbuf)) == -1){
		fprintf(stderr,"setsockopt error : %s\n", strerror(errno));
		return 1;
	}
	len = sizeof(rcvbuf);
	if( getsockopt(sockfd, SOL_SOCKET, SO_RCVBUF, &rcvbuf, &len) == -1){
		fprintf(stderr,"getsockopt error : %s\n", strerror(errno));
		return 4;
	}
	printf("SO_RCVBUF = %d (after setting it to %d)\n", rcvbuf, RCVBUF);

#define MSS 1300
	mss=MSS;
	if( setsockopt(sockfd, IPPROTO_TCP, TCP_MAXSEG, &mss, sizeof(mss)) == -1){
		fprintf(stderr,"setsockopt error : %s\n", strerror(errno));
		return 1;
	}
	len = sizeof(mss);
	if( getsockopt(sockfd, IPPROTO_TCP, TCP_MAXSEG, &mss, &len) == -1 ){
		fprintf(stderr,"getsockopt error : %s\n", strerror(errno));
		return 3;
	}
	printf("MSS: = %d (after setting it to %d)\n", mss, MSS);
	
#endif //OPTION_SET

	bzero(&servaddr, sizeof(servaddr));
	servaddr.sin6_family = AF_INET6;
	servaddr.sin6_port = htons(13);		/* daytime server */
	int er;
	if(  (er=inet_pton(AF_INET6, argv[1], &servaddr.sin6_addr)) == -1 ){
		fprintf(stderr,"inet_pton error : %s\n", strerror(errno));
		return 1;
	}else if(er=0)
	{ printf("Addres error \n");
		return 1;
	}
	

	if( connect(sockfd, (SA *) &servaddr, sizeof(servaddr)) == -1){
		fprintf(stderr,"connect: %s\n", strerror(errno));
		return 1;
	}

	len = sizeof(rcvbuf);
	if( getsockopt(sockfd, SOL_SOCKET, SO_RCVBUF, &rcvbuf, &len)== -1) {
		fprintf(stderr,"getsockopt error (5) : %s\n", strerror(errno));
		return 5;

	}
	len = sizeof(mss);
	if( getsockopt(sockfd, IPPROTO_TCP, TCP_MAXSEG, &mss, &len) == -1){
		fprintf(stderr,"getsockopt error (6) : %s\n", strerror(errno));
		return 6;
	}
	printf("After connect: SO_RCVBUF = %d, MSS = %d\n", rcvbuf, mss);

	int time_start=0;
	if( gettimeofday(&start,0) != 0 ){
		fprintf(stderr,"gettimeofday error : %s\n", strerror(errno));
	}else{
		time_start=1;
	}
	int count=0;
	unsigned long size=0;
	
	
	
	//PoczÄ…tek wymiany danych
	while ( (n = read(sockfd, recvint, sizeof(int)*4)) > 0) {
		recvline[n] = 0;	/* null terminate */
		printf("\ninitialization number: %d %d %d %d\n", recvint[0],recvint[1],recvint[2],recvint[3]);
		  if ( fputs(recvline, stdout) == EOF) {
			  
			fprintf(stderr,"fputs error : %s\n", strerror(errno));
			return 1;
		  }
	}
	
	if (n < 0)
		fprintf(stderr,"read error : %s\n", strerror(errno));
	int s;
	if( gettimeofday(&stop,0) != 0 ){
		fprintf(stderr,"gettimeofday error : %s\n", strerror(errno));
	}else{
		if(time_start == 1){
			s=(int)((stop.tv_sec*1000000 + stop.tv_usec) - (start.tv_sec*1000000 + start.tv_usec));
			double tr = (size*8.0)/(s);
		    fprintf(stderr,"Reading from socket in: %d ms, : in %d segments (%lu)(%lf mbit/s)\n", s/1000, count, size, tr );
		}
	 
	}

	fflush(stdout);

	exit(0);
}

